#********************************************************************************# Copyright (c) 2018, 2023 OFFIS e.V.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0.
#
# SPDX-License-Identifier: EPL-2.0
# 
# Contributors:
#    JÃ¶rg Walter - initial implementation
# *******************************************************************************/

PROJECT(busybox C)
CMAKE_MINIMUM_REQUIRED(VERSION 3.5)

include(toolchain-utils)

include(ProcessorCount)
ProcessorCount(CPUS)
# allow limiting the CPU count; notably, cross-building for windows has some unknown race condition
if(NOT "$ENV{CROSS_TOOLCHAIN_CPUS}" STREQUAL "")
  set(CPUS "$ENV{CROSS_TOOLCHAIN_CPUS}")
endif()

# Create autogenerated files
file(COPY ${CGET_RECIPE_DIR}/toolchain_defconfig DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/configs/)
patch(${CMAKE_CURRENT_SOURCE_DIR}/configs/toolchain_defconfig "CROSS_COMPILER_PREFIX=\"\"" "CROSS_COMPILER_PREFIX=\"${TOOLCHAIN_ARCH}-\"")
if (WIN32)
  patch(${CMAKE_CURRENT_SOURCE_DIR}/configs/toolchain_defconfig "# CONFIG_PLATFORM_MINGW32 is not set" "CONFIG_PLATFORM_MINGW32=y")

else()
  patch(${CMAKE_CURRENT_SOURCE_DIR}/configs/toolchain_defconfig "# CONFIG_PLATFORM_POSIX is not set" "CONFIG_PLATFORM_POSIX=y")
  # musl needs this as its regex.h is not feature-complete
  patch(include/xregex.h "<regex.h>" "\"../win32/regex.h\"")
  patch(editors/vi.c "<regex.h>" "\"../win32/regex.h\"")
  patch(win32/regex.c "<regex.h>" "\"regex.h\"")
  patch(win32/Kbuild "lib-.*= regex.o" "lib-y += regex.o match_class.o")
endif()

# ENABLE_EXTRA_COMPAT breaks grep on windows, for feature parity disable it everywhere
patch(findutils/grep.c "#include \"xregex.h\"" "#include \"xregex.h\"\n#define ENABLE_EXTRA_COMPAT 0\n#define IF_EXTRA_COMPAT(...)")

if(APPLE)
  patch(${CMAKE_CURRENT_SOURCE_DIR}/configs/toolchain_defconfig "# CONFIG_PLATFORM_POSIX is not set" "CONFIG_PLATFORM_POSIX=y")
  patch(${CMAKE_CURRENT_SOURCE_DIR}/include/platform.h "#if defined\\(__APPLE__\\)" "
#if defined(__APPLE__)
#undef HAVE_MEMRCHR
#undef HAVE_MEMPCPY
#define __bswap16 __builtin_bswap16
#define __bswap32 __builtin_bswap32
#define __bswap64 __builtin_bswap64
#define stime(x) (-1)
#define BB_GLOBAL_CONST 
#include <arpa/inet.h>
  ")
  patch(${CMAKE_CURRENT_SOURCE_DIR}/coreutils/stat.c "human_time\\([^)]*tim\\)" "\"-\"")
  patch(${CMAKE_CURRENT_SOURCE_DIR}/coreutils/touch.c "st_atim\\." "st_atimespec.")
  patch(${CMAKE_CURRENT_SOURCE_DIR}/coreutils/touch.c "st_mtim\\." "st_mtimespec.")
  patch(${CMAKE_CURRENT_SOURCE_DIR}/scripts/Makefile.build "..LD. -nostdlib ..ld_flags. -r -o" "\$(AR) rcs")
endif()

execute_process(COMMAND make toolchain_defconfig KBUILD_VERBOSE=1 CC=${CMAKE_C_COMPILER} AR=${CMAKE_AR} WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

execute_process(COMMAND make -j${CPUS} SKIP_STRIP=y CC=${CMAKE_C_COMPILER} AR=${CMAKE_AR} WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} RESULT_VARIABLE RC)
if (${RC} GREATER 0)
  message(FATAL_ERROR "Build failed")
endif()

install(PROGRAMS busybox${CMAKE_EXECUTABLE_SUFFIX} DESTINATION bin)

if (NOT CMAKE_CROSSCOMPILING)
install(CODE [=[
  file(MAKE_DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/bin")
  execute_process(COMMAND "${CMAKE_CURRENT_BINARY_DIR}/busybox" --install bin RESULT_VARIABLE RC)
  if (${RC} GREATER 0)
    message(FATAL_ERROR "Install failed")
  endif()

  file(GLOB applets RELATIVE "${CMAKE_CURRENT_LIST_DIR}/bin" LIST_DIRECTORIES false "${CMAKE_CURRENT_LIST_DIR}/bin/*")
  list(TRANSFORM applets REPLACE "\\[" "[]") # stupid CMake list syntax
  foreach(applet IN LISTS applets)
    string(REGEX REPLACE "\\[\\]" "[" applet "${applet}")
    if (NOT applet STREQUAL "busybox")
      file(REMOVE "${CMAKE_INSTALL_PREFIX}/bin/${applet}")
      list(APPEND CMAKE_INSTALL_MANIFEST_FILES "bin/${applet}")
    endif()
  endforeach()

  execute_process(COMMAND "${CMAKE_INSTALL_PREFIX}/bin/busybox" --install "${CMAKE_INSTALL_PREFIX}/bin" RESULT_VARIABLE RC)
  if (${RC} GREATER 0)
    message(FATAL_ERROR "Install failed")
  endif()
]=])
endif()
